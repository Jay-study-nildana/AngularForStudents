// <auto-generated />
using System;
using AuthAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthAPI.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "38e75b6c-b8ec-4951-c481-946a2f8e8642",
                            ConcurrencyStamp = "38e75b6c-b8ec-4951-c481-946a2f8e8642",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "a850f27d-35b2-5335-b8cf-2cc11c8d7904",
                            ConcurrencyStamp = "a850f27d-35b2-5335-b8cf-2cc11c8d7904",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        },
                        new
                        {
                            Id = "a850f27d-35b2-5335-b8cf-2cc11c8d1234",
                            ConcurrencyStamp = "a850f27d-35b2-5335-b8cf-2cc11c8d7904",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df68cbfe-18a4-48e8-96ff-04e308311d6c",
                            Email = "admin@BungieCordBlog.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BUNGIECORDBLOG.COM",
                            NormalizedUserName = "ADMIN@BUNGIECORDBLOG.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDaSJ9aFA6kZdpSusm8/o+kOXV9kgzqpDACAqj4OM9NQaSGEB3JMQcDbZ14uJ8Zj3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5675f6d6-edbb-4c2d-a83a-a56aced2865f",
                            TwoFactorEnabled = false,
                            UserName = "admin@BungieCordBlog.com"
                        },
                        new
                        {
                            Id = "b3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a64c20e9-ddf0-4206-a71f-4a0648549280",
                            Email = "reader@BungieCordBlog.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "READER@BUNGIECORDBLOG.COM",
                            NormalizedUserName = "READER@BUNGIECORDBLOG.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJNVewzlaTeUFEAdBLqkpJ7lyEKOJjFRELBnEO+AuCrZH74ZNdzKspRW13GHA2mQZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7768e94d-149f-45d8-8655-6d3c2b154038",
                            TwoFactorEnabled = false,
                            UserName = "reader@BungieCordBlog.com"
                        },
                        new
                        {
                            Id = "c3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf77706d-75e0-4174-9c70-de2119c4356e",
                            Email = "writer@BungieCordBlog.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WRITER@BUNGIECORDBLOG.COM",
                            NormalizedUserName = "WRITER@BUNGIECORDBLOG.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQx3w0M20FWkb+A/qNxZmTZbLeOG0FBX1CE1w5OHqKNp5qsuLNUjJU1QsrW/sc1Uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cce3ea68-aeac-4b45-b350-4a615736d744",
                            TwoFactorEnabled = false,
                            UserName = "writer@BungieCordBlog.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            RoleId = "38e75b6c-b8ec-4951-c481-946a2f8e8642"
                        },
                        new
                        {
                            UserId = "f3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            RoleId = "a850f27d-35b2-5335-b8cf-2cc11c8d7904"
                        },
                        new
                        {
                            UserId = "f3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            RoleId = "a850f27d-35b2-5335-b8cf-2cc11c8d1234"
                        },
                        new
                        {
                            UserId = "b3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            RoleId = "38e75b6c-b8ec-4951-c481-946a2f8e8642"
                        },
                        new
                        {
                            UserId = "c3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            RoleId = "a850f27d-35b2-5335-b8cf-2cc11c8d7904"
                        },
                        new
                        {
                            UserId = "c3d378fd-e54d-5f4c-9219-b2b2f92a017e",
                            RoleId = "38e75b6c-b8ec-4951-c481-946a2f8e8642"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
